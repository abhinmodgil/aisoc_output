--- Detailed Investigative Plan for Alert ID: 1716285915.9646311 ---
--- Agent ID: ALU-003 ---

--- Initial Assessment (from Contextual Inquiry) ---
This alert, identified as Rule ID 521 ('Possible kernel level rootkit'), suggests a potential rootkit installation on 'ALU-ORDPROC-PROD-01'. The MITRE Technique T1014 focuses on hiding processes, files, or network activity. Key Cybersecurity Dimensions include: Process Behavior (to assess the hidden process), Host Vulnerability (kernel integrity checks), User Attribution (if a user initiated the rootkit), and Contextual Dimension (criticality of the production server).

--- Validated IOCs Used for Plan Generation ---
{
  "Timestamp": "2024-05-21T10:05:15.123+0000",
  "Alert ID": "1716285915.9646311",
  "Rule ID": "521",
  "Rule Description": "Possible kernel level rootkit",
  "MITRE Technique ID": "T1014 \u2013 Rootkit",
  "Agent ID": "ALU-003",
  "Agent Hostname": "ALU-ORDPROC-PROD-01",
  "Agent IP": "10.60.5.25",
  "Groups": "ossec, rootcheck",
  "Title": "Process '2508' hidden from /proc.",
  "Location": "rootcheck",
  "Decoder": "rootcheck"
}

--- Detailed Investigative Questions and Plans ---

Question 1: What process is being hidden from /proc?
Detailed Plan:
**Investigative Plan:**
*   Objective: Identify which process is being hidden from /proc on host ALU-ORDPROC-PROD-01.

*   Key Data Sources/Tools (Prioritized):
    1.  Linux Command Line (on ALU-ORDPROC-PROD-01): Use commands like ps and check /proc/ to verify process visibility.
    2.  Velociraptor (on ALU-ORDPROC-PROD-01): Query endpoint to check process status and compare with /proc listings.
    3.  Wazuh API (for Agent ID ALU-003): Search logs for related events (e.g., rootcheck alerts, suspicious processes).

*   Steps & Example Commands/Queries:
    1.  Linux CLI (on ALU-ORDPROC-PROD-01, requires direct access or EDR execution):
        * Attempt to list the process: ps aux | grep <PROCESS_ID>
        * Check its /proc entry: ls -ld /proc/<PROCESS_ID>; cat /proc/<PROCESS_ID>/status
        (Note: If hidden, these commands might yield no output or errors for the specific PID.)

    2.  Velociraptor (Target Hostname: ALU-ORDPROC-PROD-01 or Agent ID: ALU-003):
        * Query to list processes using standard artifact:
        * Query to check for discrepancies or signs of hiding (advanced):

    3.  Wazuh API (Target Agent ID: ALU-003):
        * Query for rootcheck or suspicious process related alerts:
        * Generic log search for the PID on the agent:


*   Expected Outcome/Interpretation:
    - ✅ If process <PROCESS_ID> appears normally in ps and /proc/<PROCESS_ID> exists and is readable, it might be a false positive from the detection rule, or the hiding is intermittent/sophisticated.
    - ❌ If ps doesn't show <PROCESS_ID> but other tools (like EDR kernel-level listings if available via Velociraptor) do, or if /proc/<PROCESS_ID> is missing/inaccessible while the process is known to be running, it strongly indicates hiding.
--------------------------------------------------

Question 2: How did the rootkit manage to hide itself from standard Linux monitoring tools?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify methods/processes used by the rootkit to evade detection and remain hidden from standard Linux monitoring tools.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Velociraptor (on <AGENT_HOSTNAME>):** Query endpoint to check process status and compare with /proc listings.
    2.  **Linux Command Line (on <AGENT_HOSTNAME>):** Use commands like `strace` and check `/sys/kernel/debug/tracing` to analyze system calls and detect evasion techniques.
    3.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for related events (e.g., rootcheck alerts, suspicious processes) and correlate them with timestamps around the initial detection.

*   **Steps & Example Commands/Queries:**
    1.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Query to list processes using standard artifact:
            ```sql
            SELECT * FROM Artifact.Linux.System.Pslist() WHERE Pid == <PROCESS_ID>
            ```
        * Advanced query to check for discrepancies or signs of hiding:
            ```sql
            SELECT * FROM Artifact.Linux.System.Pslist() WHERE Pid!= <PROCESS_ID> AND Hidden == true;
            ```
        * Query to check for unusual syscalls or modifications to /proc:
            ```sql
            SELECT * FROM Artifact.Linux.SyscallTracer() WHERE Syscall == "hide_process";
            ```

    2.  **Linux CLI (on <AGENT_HOSTNAME>):**
        * Attempt to list the process:
            ```bash
            ps aux | grep <PROCESS_ID>
            ls -ld /proc/<PROCESS_ID>
            cat /proc/<PROCESS_ID>/status
            ```
        * Check for signs of tampering or evasion:
            ```bash
            strace -p <PROCESS_ID> -f -o /tmp/strace.out # Monitor process for suspicious syscalls
            ```
        * Analyze system call traces for evasion attempts:
            ```bash
            less /tmp/strace.out | grep "hide_process" # Look for specific syscall names
            ```

    3.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Query for rootcheck or suspicious process related alerts:
            ```http
            ```
        * Generic log search for the PID on the agent:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=<PROCESS_ID>
            ```
        * Correlate with previous alerts or logs around the same time frame:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q="<PROCESS_ID>" AND timestamp > 2024-05-21T10:00:00
            ```

*   **Expected Outcome/Interpretation:**
    - ✅ If the rootkit's evasion method is detected through Velociraptor or Linux CLI analysis, it provides insights into its capabilities and potential remediation steps.
    - ❌ If no evasion technique is found, consider alternative explanations such as misconfiguration, incomplete detection rules, or advanced obfuscation techniques.
--------------------------------------------------

Question 3: Is the hidden process running under a legitimate user context or as root?
Detailed Plan:
**Investigative Plan:*** Objective: Determine whether the hidden process (<PROCESS_ID>) is running under a normal user account or with elevated privileges (root).

* Key Data Sources/Tools (Prioritized):
    1. Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):
        * Query to retrieve process details including user context:
            ```sql
            SELECT * FROM Artifact.Linux.System.Pslist() WHERE Pid == <PROCESS_ID>
            ```
        * Advanced option: Compare process listing methods (e.g., ps vs procfs) to detect inconsistencies.

    2. Wazuh API (Target Agent ID: <AGENT_ID>):
        * Search for process-related alerts mentioning the hidden process:
            ```http
            ```
        * Look for additional context such as parent process, network connections, or file system operations.

* Steps & Example Commands/Queries:
    1. Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):
        * Run the above query to get process details.
        * Inspect the returned results for the User field.
        * If the process is running under a non-root user, proceed to next steps; otherwise, escalate immediately.

    2. Wazuh API (Target Agent ID: <AGENT_ID>):
        * Query for process execution logs:
            ```http
            ```
        * Review the response for any unusual parent processes or command line arguments.

* Expected Outcome/Interpretation:
    - ✅ If the process is running under a regular user account without elevated privileges, continue investigating based on other findings.
    - ❌ If the process is running as root or another privileged user, escalate immediately as it could indicate unauthorized privilege escalation.
--------------------------------------------------

Question 4: Does the host 'ALU-ORDPROC-PROD-01' have any known vulnerabilities that could allow kernel-level compromise?
Detailed Plan:
**Investigative Plan:***   **Objective:** Identify known vulnerabilities in the operating system and software stack of host <AGENT_HOSTNAME>.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **CVE Database Lookup:** Search for CVEs affecting the specific OS version and installed packages on <AGENT_HOSTNAME>.
    2.  **Asset Inventory Database:** Look up <AGENT_HOSTNAME> in organizational asset management to retrieve its OS type/version and patch history.
    3.  **Nessus Scanner (if available):** Run a vulnerability scan against <AGENT_HOSTNAME> to detect active exploits.

*   **Steps & Example Commands/Queries:**
    1.  **CVE Database Lookup (e.g., NVD API):**
        * Query endpoint: `GET /vuln/?cpe_name=cpe:/o:linux:`<OS_VERSION>`&product=<PACKAGE_NAME>&version=<VERSION>`
        * Example query for Ubuntu 20.04 LTS: `GET /vuln/?cpe_name=cpe:/o:linux:ubuntu_linux:20.04_lts`
        * Example query for Apache HTTP Server: `GET /vuln/?cpe_name=cpe:/a:apache:http_server:&version=<HTTP_SERVER_VERSION>`

    2.  **Asset Inventory Lookup (e.g., Structured File or DB):**
        * Query endpoint: `GET /assets/<AGENT_HOSTNAME>`
        * Example query for asset lookup: `SELECT * FROM assets WHERE hostname = '<AGENT_HOSTNAME>'`

    3.  **Nessus Vulnerability Scan (if available):**
        * Execute Nessus scan: `./nessus_scan.sh <AGENT_HOSTNAME>`
        * Review results: `cat nessus_results.xml | grep -i "critical|high"`

*   **Expected Outcome/Interpretation:**
    - ✅ If recent patches are applied, and no high-severity CVEs are found, it suggests minimal risk.
    - ❌ If outdated software versions are detected, especially with known exploits, escalate for immediate remediation.
--------------------------------------------------

Question 5: Have other hosts in the environment shown similar alerts indicating rootkits?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify if other hosts in the organization have also triggered similar rootkit-related alerts.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **SIEM (e.g., Wazuh API):** Query for rootkit alerts across multiple agents.
    2.  **EDR (e.g., Velociraptor):** Query for rootkit detections across endpoints.
    3.  **Threat Intelligence Platform (TIP):** Look up recent alerts mentioning rootkits.

*   **Steps & Example Commands/Queries:**
    1.  **Wazuh API (Target Agents IDs: <LIST_OF_AGENT_IDS>):**
        * Query for rootkit alerts across multiple agents:
        ```http
        GET /agents/<AGENT_ID_1>/<AGENT_ID_N>/logs/summary?q=rule.groups:rootcheck
        ```
        (Replace <AGENT_ID_1> and <AGENT_ID_N> with actual agent IDs from the environment.)

    2.  **Velociraptor (Target Hostnames: <LIST_OF_HOSTNAMES> or Agent IDs: <LIST_OF_AGENT_IDS>):**
        * Query for rootkit detections across endpoints:
        ```sql
        SELECT * FROM Artifact.Linux.RootkitDetection(Hostnames=['<HOSTNAME_1>', '<HOSTNAME_N>'])
        ```
        (Replace <HOSTNAME_1> and <HOSTNAME_N> with actual hostnames from the environment.)

    3.  **TIP (e.g., MISP):**
        * Search for recent alerts mentioning rootkits:
        ```http
        GET /alerts?q=rootkit
        ```
        (Adjust the query based on the TIP's syntax and available fields.)

*   **Expected Outcome/Interpretation:**
    - ✅ If other hosts in the environment have triggered similar rootkit alerts, it suggests widespread presence of rootkits.
    - ❌ If only one host has reported such an alert, it could indicate isolated compromise or misconfiguration.
--------------------------------------------------

Question 6: What additional processes or services are running on 'ALU-ORDPROC-PROD-01'?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify all active processes and services on host <AGENT_HOSTNAME>.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Linux Command Line (on <AGENT_HOSTNAME>):** Use commands like `ps`, `top`, `lsof`, `netstat`, `ss`, `pgrep`.
    2.  **Velociraptor (on <AGENT_HOSTNAME>):** Query endpoints to enumerate processes and network connections.
    3.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for related events (e.g., rootcheck alerts, suspicious processes).

*   **Steps & Example Commands/Queries:**
    1.  **Linux CLI (on <AGENT_HOSTNAME>, requires direct access or EDR execution):**
        * List all running processes: `ps aux; top -n 1`
        * List open files: `lsof -p <PID>`
        * List listening ports: `netstat -tulpn` or `ss -tulnp`
        * Find processes matching specific criteria: `pgrep <pattern>`

    2.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Query to list all processes: `SELECT * FROM Artifact.Linux.System.Pslist()`
        * Query to list network listeners: `SELECT * FROM Artifact.Network.Listeners()`
        * Advanced query to correlate processes with open sockets: `SELECT pid, comm, fd_name FROM Artifact.Process.FdInfo() JOIN Artifact.Network.Sockets() ON fd_inode = socket_path`

    3.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Search for rootcheck alerts mentioning processes:
          `GET /agents/<AGENT_ID>/logs/summary?q=rule.groups:rootcheck AND data.process.pname:*`
        * Search for suspicious process alerts:
          `GET /agents/<AGENT_ID>/logs/summary?q=rule.groups:malware AND data.process.pname:*`

*   **Expected Outcome/Interpretation:**
    - ✅ If the process list includes many legitimate system daemons and services, it's likely benign.
    - ❌ If only a few processes are seen, especially non-standard ones, it could indicate a minimal footprint malware or compromised service.
--------------------------------------------------

Question 7: Are there any indicators of lateral movement or further compromise after the rootkit installation?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify if the rootkit detected on host <AGENT_HOSTNAME> was installed through lateral movement or if it led to further system compromise.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME>):** Run advanced queries to detect lateral movement artifacts, persistence mechanisms, and unusual network connections.
    2.  **Wazuh API (Target Agent ID: <AGENT_ID>):** Search logs for related events (e.g., failed login attempts, unauthorized access, suspicious process executions).
    3.  **Organizational Data Lookup (e.g., Asset Inventory, User Access Logs):** Cross-reference the compromised host against recent changes in user accounts, permissions, or network configurations.

*   **Steps & Example Commands/Queries:**
    1.  **Velociraptor (Advanced Queries):**
        * Detect lateral movement:
            ```sql
            SELECT * FROM Artifact.Linux.NetworkConnections()
            WHERE Time > DATE_SUB(NOW(), INTERVAL 24 HOUR) AND DestinationIp IN ('<AGENT_IP>', '<OTHER_AGENT_IPS>')
            ```
        * Find persistence mechanisms:
            ```sql
            SELECT * FROM Artifact.Linux.PersistenceMechanisms()
            WHERE Path LIKE '/usr/bin/%' OR Path LIKE '/opt/%'
            ```
        * Look for unusual network connections:
            ```sql
            SELECT * FROM Artifact.Linux.UnusualNetworkConnections()
            WHERE DestinationIp IN ('<AGENT_IP>', '<OTHER_AGENT_IPS>')
            ```

    2.  **Wazuh API (Generic Log Search):**
        * Search for failed login attempts:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=failed_login_attempt
            ```
        * Look for unauthorized access:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=unauthorized_access
            ```
        * Search for suspicious process executions:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=suspicious_process_execution
            ```

    3.  **Organizational Data Lookup (Asset Inventory):**
        * Check for recent changes in user accounts:
            ```bash
            # Example lookup script
            echo "Checking user accounts..."
            curl -s | jq '.[] | select(.username == "<USERNAME>")'
            ```
        * Review recent permission changes:
            ```bash
            # Example lookup script
            echo "Reviewing recent permission changes..."
            curl -s | jq '.[] | select(.action == "grant")'
            ```

*   **Expected Outcome/Interpretation:**
    - ✅ If lateral movement is confirmed (e.g., new connections to other hosts, unexpected persistence mechanisms), it strengthens the case for further investigation into the broader attack scope.
    - ❌ If no additional indicators are found beyond the initial rootkit detection, focus on securing the compromised host and monitoring for future anomalies.
--------------------------------------------------

Question 8: Can we retrieve a memory dump or forensic image of 'ALU-ORDPROC-PROD-01' to analyze the hidden process?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Obtain a memory snapshot or forensic image of the affected system (<AGENT_HOSTNAME>) to inspect the hidden process ('<PROCESS_ID>') and determine if it's a legitimate rootkit or a false positive.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Velociraptor (on <AGENT_HOSTNAME>):** Perform live memory acquisition and analysis.
    2.  **Wazuh API (for Agent ID <AGENT_ID>):** Query logs for related events and extract necessary metadata.
    3.  **Organizational Forensic Tools (e.g., FTK Imager, EnCase, Volatility):** Analyze offline images for deeper inspection.

*   **Steps & Example Commands/Queries:**
    1.  **Live Memory Acquisition (Velociraptor):**
        * Target Hostname: <AGENT_HOSTNAME>
        * Query to collect memory snapshot:
            ```sql
            SELECT * FROM Artifact.Linux.Memdump(Hostname='<AGENT_HOSTNAME>')
            ```
        * Extractor Name: `Memdump`
        * Output Path: Specify a local directory where the memory dump will be saved.

    2.  **Log Analysis (Wazuh API):**
        * Endpoint: `GET /agents/<AGENT_ID>/logs/summary`
        * Query Parameters:
            * `q`: `rule.groups:rootcheck AND data.process.pid:<PROCESS_ID>`
        * Expected Results:
            * Timestamp of initial rootcheck alert.
            * Any subsequent alerts mentioning the same process.
            * Relevant log entries showing process creation or termination.

    3.  **Offline Image Creation (FTK Imager):**
        * Tool: FTK Imager or similar forensic tool.
        * Steps:
            * Connect to the remote machine over SMB or SSH.
            * Create a new case in FTK Imager.
            * Add the remote drive as a source.
            * Select the appropriate partition/drive containing the operating system.
            * Acquire a full disk image or specific partitions of interest.
            * Save the image locally for analysis.

    4.  **Memory Analysis (Volatility Framework):**
        * Tool: Volatility Framework.
        * Steps:
            * Load the acquired memory dump into Volatility.
            * Run volatility plugins such as `volshell` or `pslist` to enumerate processes.
            * Inspect process memory regions for hidden artifacts.
            * Look for signs of rootkits, hooks, or other evasion techniques.

*   **Expected Outcome/Interpretation:**
    - ✅ If the memory dump reveals the presence of a rootkit or suspicious code, it confirms the alert.
    - ❌ If no rootkit is detected, review the original alert and consider false positives or misconfigurations.
--------------------------------------------------

Question 9: Are there any security controls or endpoint protection solutions deployed that might detect or mitigate rootkits?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify which security controls or endpoint protection solutions are deployed on host <AGENT_HOSTNAME>.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Organizational Asset Inventory:** Look up <AGENT_HOSTNAME> in asset management system for installed software.
    2.  **EDR/Endpoint Protection Console:** Check for active agents or policies on <AGENT_HOSTNAME> in EDR/XDR console.
    3.  **Security Policy Documentation:** Review network segmentation, patching schedules, and security baselines for <AGENT_HOSTNAME>.

*   **Steps & Example Commands/Queries:**
    1.  **Asset Inventory Lookup (via Web Interface or API):**
        * Find <AGENT_HOSTNAME> in asset inventory tool or spreadsheet.
        * Look for columns related to installed antivirus, EDR, HIDS, firewalls, etc.
        * Note: This might require manual review or querying a database/API.

    2.  **EDR/XDR Console (if available):**
        * Log into EDR/XDR console.
        * Navigate to Agents or Devices section.
        * Search for <AGENT_HOSTNAME> or filter by hostname/IP range.
        * Check if any agents are currently online and what protections they have enabled.

    3.  **Network Segmentation Map:**
        * Locate <AGENT_HOSTNAME> in network diagram or map.
        * Check if it's behind a firewall or in a DMZ.
        * Note: This might involve reviewing Visio diagrams or asking network team.

*   **Expected Outcome/Interpretation:**
    - ✅ If <AGENT_HOSTNAME> has EDR, AV, or HIDS installed and actively reporting, it likely has basic rootkit detection capabilities.
    - ❌ If <AGENT_HOSTNAME> is only protected by a firewall or has no endpoint protection at all, it's more vulnerable to rootkits.
    -? If <AGENT_HOSTNAME> is in a segmented network without internet access, it might still be protected by air-gapped security measures.
--------------------------------------------------