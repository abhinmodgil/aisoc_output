--- Detailed Investigative Plan for Alert ID: 1716285915.9646311 ---
--- Agent ID: ALU-003 ---

--- Initial Assessment (from Contextual Inquiry) ---
This alert, identified by MITRE Technique T1014 (Rootkit), detects a potentially compromised system ('ALU-ORDPROC-PROD-01') where a process ('2508') has been hidden from the standard Linux process listing (/proc). The key Cybersecurity Dimensions for initial investigation are: Process Behavior (to examine the hidden process), Host Vulnerability (assess kernel integrity), User Attribution (identify who ran the rootkit), and Contextual Dimension (understand the criticality of the affected system).

--- Validated IOCs Used for Plan Generation ---
{
  "Timestamp": "2024-05-21T10:05:15.123+0000",
  "Alert ID": "1716285915.9646311",
  "Rule ID": "521",
  "Rule Description": "Possible kernel level rootkit",
  "MITRE Technique ID": "T1014 \u2013 Rootkit",
  "Agent ID": "ALU-003",
  "Agent Hostname": "ALU-ORDPROC-PROD-01",
  "Agent IP": "10.60.5.25",
  "Group": "aluskort-prod",
  "Title": "Process '2508' hidden from /proc.",
  "Decoder": "rootcheck"
}

--- Detailed Investigative Questions and Plans ---

Question 1: What is the full path and executable name of the hidden process '2508'?
Detailed Plan:
**Investigative Plan:**
*   Objective: Identify the exact path and executable name of the hidden process '2508'.
*   Key Data Sources/Tools (Prioritized):
    1.  Velociraptor (on <AGENT_HOSTNAME>): Query endpoint to retrieve process details including full path.
    2.  Linux Command Line (on <AGENT_HOSTNAME>): Use commands like `find` and `lsof` to locate the process.
    3.  Wazuh API (for Agent ID <AGENT_ID>): Search logs for related events (e.g., rootcheck alerts, suspicious processes).

*   Steps & Example Commands/Queries:
    1.  Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):
        * Query to list processes with full paths:
            ```sql
            SELECT * FROM Artifact.Linux.System.Pslist() WHERE Pid == <PROCESS_ID> AND FullPath IS NOT NULL;
            ```
        * Advanced query to check for discrepancies or signs of hiding (requires more sophisticated VQL):
            ```sql
            SELECT * FROM Artifact.Linux.System.Pslist() WHERE Pid == <PROCESS_ID> AND FullPath!= "/proc/self/exe";
            ```

    2.  Linux CLI (on <AGENT_HOSTNAME>, requires direct access or EDR execution):
        * Attempt to locate the process's full path:
            ```bash
            find / -xdev \( -path /proc -o -path /sys \) -prune -o -type f -exec ls -la {} \; 2>/dev/null | grep <PROCESS_ID>
            ```
        * Look for open files associated with the process:
            ```bash
            lsof -p <PROCESS_ID>
            ```

    3.  Wazuh API (Target Agent ID: <AGENT_ID>):
        * Query for rootcheck or suspicious process related alerts:
            ```http
            ```
        * Generic log search for the PID on the agent:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=<PROCESS_ID>
            ```

*   Expected Outcome/Interpretation:
    - ✅ If the process is located and its full path is retrieved, validate against known legitimate executables.
    - ❌ If unable to locate the process despite being active, it suggests advanced evasion techniques or a compromised system.
--------------------------------------------------

Question 2: How did the rootkit manage to hide the process '2508' from /proc?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify methods/processes used by the rootkit to hide process <PROCESS_ID> from /proc.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Linux Command Line (on <AGENT_HOSTNAME>):** Run commands to inspect system binaries, kernel modules, and startup scripts for anomalies.
    2.  **Velociraptor (on <AGENT_HOSTNAME>):** Query endpoint to check for unusual kernel module loading, sysctl changes, or hooks.
    3.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for related events (e.g., rootcheck alerts, suspicious process starts).

*   **Steps & Example Commands/Queries:**
    1.  **Linux CLI (on <AGENT_HOSTNAME>, requires direct access or EDR execution):**
        * Inspect key system directories:
            * Kernel modules: `lsmod; ls /lib/modules/*`
            * Startup scripts: `cat /etc/rc.local; systemctl list-unit-files`
            * Binary modifications: `md5sum /sbin/init; md5sum /usr/bin/bash`
            * Sysctl settings: `sysctl -a | grep net.core.*bind`
        * Look for recent additions or modified files/directories related to process hiding.

    2.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Query to check for suspicious kernel modules loaded:
          ```sql
          SELECT * FROM Artifact.KernelModuleList() WHERE Name LIKE '%hiding%'
          ```
        * Query to check for sysctl changes related to process hiding:
          ```sql
          SELECT * FROM Artifact.Sysctl() WHERE Value LIKE '%hide%'
          ```
        * Query to check for process hooking/hijacking attempts:
          ```sql
          SELECT * FROM Artifact.ProcessHooking() WHERE TargetPid == <PROCESS_ID>
          ```

    3.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Query for rootcheck or suspicious process related alerts:
          ```http
          ```
        * Generic log search for the PID on the agent:
          ```http
          ```


*   **Expected Outcome/Interpretation:**
    - ✅ If findings indicate legitimate system operations or benign configurations, it could be a false positive or misconfiguration.
    - ❌ If findings reveal unauthorized kernel modules, altered startup scripts, or suspicious sysctl settings, it confirms rootkit presence and method of operation.
--------------------------------------------------

Question 3: What other processes or files have been altered or hidden by the rootkit?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify additional artifacts modified or hidden by the rootkit detected on host <AGENT_HOSTNAME>.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Velociraptor (on <AGENT_HOSTNAME>):** Run advanced VQL queries to detect anomalies in system files, hidden processes, and registry changes.
    2.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for related events (e.g., rootcheck alerts, suspicious process creations).
    3.  **Linux Command Line (on <AGENT_HOSTNAME>):** Use commands like `find` and `grep` to scan for suspicious modifications.

*   **Steps & Example Commands/Queries:**
    1.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Advanced VQL query to detect hidden processes and altered files:
          ```sql
          SELECT * FROM Artifact.Linux.System.HiddenProcesses();
          SELECT * FROM Artifact.Linux.System.HiddenFiles();
          SELECT * FROM Artifact.Linux.Registry.Changes();
          ```
        * Compare results against expected baselines or known-good snapshots.

    2.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Query for rootcheck or suspicious process related alerts:
          ```http
          ```
        * Generic log search for the PID on the agent:
          ```http
          ```

    3.  **Linux CLI (on <AGENT_HOSTNAME>, requires direct access or EDR execution):**
        * Scan for altered system files:
          `find /var/run /dev/shm /tmp /boot -type f -exec ls -l {} \; 2>&1 | grep -vE "(proc|sys)"`
        * Look for hidden directories:
          `find / -xdev -name.[a-z] -print 2>&1 | grep -vE "/proc|/sys"`
        * Check for suspicious cron jobs:
          `cat /etc/cron.*/* | grep -iE '(bash|sh)'`

*   **Expected Outcome/Interpretation:**
    - ✅ If multiple altered files or hidden processes are found, it strengthens the case for rootkit presence.
    - ❌ If only one or two minor inconsistencies are found, consider false positives or limited scope of rootkit functionality.
--------------------------------------------------

Question 4: Can you retrieve the hidden process '2508' through alternative methods like ps aux or lsof?
Detailed Plan:
**Investigative Plan:**
*   Objective: Identify and recover the hidden process '2508' using alternative system utilities such as `ps aux` and `lsof`.
*   Key Data Sources/Tools (Prioritized):
    1.  Linux Command Line: Utilize commands like `ps aux` and `lsof` to detect and extract hidden processes.
    2.  Velociraptor: Query the endpoint to gather additional insights into process activities.
    3.  Wazuh API: Search logs for related events and anomalies associated with the process.
*   Steps & Example Commands/Queries:
    1.  Linux CLI (on <AGENT_HOSTNAME>, requires direct access or EDR execution):
        * Attempt to list the process using `ps`: `ps aux | grep <PROCESS_ID>`
        * Check process status with `lsof`: `lsof -p <PROCESS_ID>`
        * Look for discrepancies between `/proc/<PROCESS_ID>` and other process listings.
        * Query to list processes using standard artifact:
            `SELECT * FROM Artifact.Linux.System.Pslist()`
            `WHERE Pid == <PROCESS_ID>`
        * Advanced VQL query to cross-check process listings:
            `SELECT * FROM Artifact.Linux.System.Pslist() WHERE Pid == <PROCESS_ID>`
            `UNION SELECT * FROM Artifact.Linux.System.KernelPsList() WHERE Pid == <PROCESS_ID>`
        * Query for rootcheck or suspicious process-related alerts:
            `GET /agents/<AGENT_ID>/logs/summary?q=rule.groups:rootcheck OR rule.groups:malware AND (data.process.pid:<PROCESS_ID> OR "process <PROCESS_ID>")`
        * Generic log search for the PID on the agent:
            `GET /agents/<AGENT_ID>/logs/summary?q=<PROCESS_ID>`
*   Expected Outcome/Interpretation:
    - ✅ If the process is detected using `ps aux` or `lsof`, it suggests the hiding mechanism is either temporary or less sophisticated.
    - ❌ If the process remains invisible despite attempts using multiple tools, it indicates a more advanced rootkit or evasion technique.
--------------------------------------------------

Question 5: Is the agent hostname 'ALU-ORDPROC-PROD-01' running any outdated or vulnerable software?
Detailed Plan:
**Investigative Plan:*** Objective: Identify any outdated or vulnerable software running on host <AGENT_HOSTNAME>.

* Key Data Sources/Tools (Prioritized):
    1.  **Organizational Asset Inventory:** Look up <AGENT_HOSTNAME> in the asset management system for installed applications and their versions.
    2.  **Linux CLI (on <AGENT_HOSTNAME>):** Run commands to check installed packages and their versions.
    3.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME>):** Query endpoint to gather package lists and version info.
    4.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for related events (e.g., vulnerability scans, patching activities).

* Steps & Example Commands/Queries:
    1.  **Asset Inventory Lookup (assume data is in structured format like CSV/Excel):**
        * Query: "Lookup <AGENT_HOSTNAME> in asset inventory sheet for installed software and versions."
        * Expected Output: List of software names, versions, and last update dates.

    2.  **Linux CLI (on <AGENT_HOSTNAME>, requires direct access or EDR execution):**
        * Package manager checks:
            * Debian/Ubuntu: `dpkg -l | grep <SOFTWARE_NAME>`
            * RedHat/CentOS/Fedora: `rpm -qa | grep <SOFTWARE_NAME>`
            * Arch Linux: `pacman -Q | grep <SOFTWARE_NAME>`
        * Version comparison against known vulnerabilities:
            * CVE lookup tool: `cve-bin-tool cve <CVE_ID>`
            * Vulnerability scanner (if installed): `vulnscan.sh --host <AGENT_HOSTNAME>`

    3.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Query to list installed packages and versions:
            ```sql
            SELECT * FROM Artifact.Linux.PackageManagerInfo(Hostname='<AGENT_HOSTNAME>')
            ```
        * Compare results with known vulnerable versions (e.g., from NVD or vendor advisories).

    4.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Query for vulnerability scan logs related to the agent:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=data.rule.description:vulnerability_scan AND data.agent_hostname:<AGENT_HOSTNAME>
            ```
        * Query for patching-related events:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=data.rule.description:patch_management AND data.agent_hostname:<AGENT_HOSTNAME>
            ```

* Expected Outcome/Interpretation:
    - ✅ If asset inventory shows recent updates and CLI/Velociraptor/Wazuh API confirms latest versions, it's likely secure.
    - ❌ If asset inventory shows outdated software and CLI/Velociraptor/Wazuh API confirms older versions, it's highly probable that the system is vulnerable.
--------------------------------------------------

Question 6: Have any unauthorized users or services recently accessed 'ALU-ORDPROC-PROD-01'?
Detailed Plan:
**Investigative Plan:**
*   Objective: Identify recent unauthorized user or service activities on host <AGENT_HOSTNAME>.

*   Key Data Sources/Tools (Prioritized):
    1.  **Organizational Database / IAM System:** Look up recent login attempts, failed authentications, and unusual account behaviors for host <AGENT_HOSTNAME>.
    2.  **Wazuh API:** Query logs for unauthorized access attempts, unexpected service starts, or changes in system configurations.
    3.  **Velociraptor:** Collect and analyze system logs, process execution history, and network connections specifically around the time of the rootkit detection.

*   Steps & Example Commands/Queries:
    1.  **Org DB/IAM (Manual Query or LDAP Call):**
        * Retrieve recent login attempts and failed authentications for host <AGENT_HOSTNAME>:
          `SELECT * FROM login_attempts WHERE host = '<AGENT_HOSTNAME>' ORDER BY timestamp DESC LIMIT 24h;`
        * Check for unusual accounts or services attempting access:
          `SELECT * FROM service_start_events WHERE host = '<AGENT_HOSTNAME>' ORDER BY timestamp DESC LIMIT 24h;`

    2.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Search for unauthorized access attempts:
          `GET /agents/<AGENT_ID>/logs/summary?q=rule.description:unauthorized AND host:'<AGENT_HOSTNAME>'`
        * Search for unexpected service starts:
          `GET /agents/<AGENT_ID>/logs/summary?q=service.start AND host:'<AGENT_HOSTNAME>'`

    3.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME>):**
        * Query to collect recent system logs:
          ```sql
          SELECT * FROM Artifact.Linux.Syslog(Hostname='<AGENT_HOSTNAME>')
          WHERE Time >= now() - 24h
          ```
        * Query to gather recent process execution history:
          ```sql
          SELECT * FROM Artifact.Linux.ProcessHistory(Hostname='<AGENT_HOSTNAME>')
          WHERE Time >= now() - 24h
          ```
        * Query to retrieve recent network connection history:
          ```sql
          SELECT * FROM Artifact.Network.Connections(Hostname='<AGENT_HOSTNAME>')
          WHERE Time >= now() - 24h
          ```

*   Expected Outcome/Interpretation:
    - ✅ If recent logs show legitimate user/service actions (e.g., expected cron jobs, regular maintenance scripts), it could be a false positive.
    - ❌ If logs reveal unauthorized access attempts, unexpected service starts, or unusual account behaviors, it strengthens the case for further investigation.
--------------------------------------------------

Question 7: What logs or audit trails exist on 'ALU-ORDPROC-PROD-01' that might indicate when the rootkit was installed?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify key system events, logs, or artifacts that could reveal the installation time of the rootkit detected on host <AGENT_HOSTNAME>.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Linux Audit Logs (on <AGENT_HOSTNAME>):** Review system-wide audit logs for unusual activities around the time of detection.
    2.  **Wazuh API (for Agent ID <AGENT_ID>):** Search for related alerts or logs generated during the timeframe of interest.
    3.  **Velociraptor (on <AGENT_HOSTNAME>):** Query endpoint to check for any anomalous changes or events near the rootkit's detection.

*   **Steps & Example Commands/Queries:**
    1.  **Linux Audit Log Analysis (on <AGENT_HOSTNAME>):**
        * Review recent audit logs for events such as:
            -   New users added (`useradd`)
            -   Changes to system binaries (`chmod`, `mv`, etc.)
            -   Kernel module loading/unloading (`modprobe`)
            -   Suspicious cron jobs created (`crontab`)
            -   Unusual network connections (`netstat`)
            -   Unexpected package installations (`yum`, `apt-get`)
        * Look for entries around the timestamp of the rootkit detection event.

    2.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Query for rootcheck or similar alerts:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=rule.groups:rootcheck OR rule.groups:kernel_mod AND (data.rule.description:Possible kernel level rootkit OR data.rule.description:Rootkit)
            ```
        * Generic log search for the timeframe of the rootkit detection:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=timestamp:[2024-05-20T00:00:00 TO 2024-05-21T23:59:59]
            ```

    3.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Query to check for any anomalous changes or events near the rootkit's detection:
            ```sql
            SELECT * FROM Artifact.Linux.System.ChangesSinceTime('2024-05-20T00:00:00') WHERE Timestamp > '2024-05-20T00:00:00' AND Timestamp <= '2024-05-21T23:59:59'
            ```
        * Advanced query to detect unexpected kernel modules loaded:
            ```sql
            SELECT * FROM Artifact.Linux.KernelModules() WHERE Timestamp > '2024-05-20T00:00:00' AND Timestamp <= '2024-05-21T23:59:59'
            ```

*   **Expected Outcome/Interpretation:**
    - ✅ If audit logs show unauthorized user additions, binary modifications, or suspicious cron jobs around the detection time, it strengthens the case for a rootkit installation.
    - ❌ If no relevant events are found in audit logs, consider searching for less frequent events like kernel module loading or network anomalies.
--------------------------------------------------

Question 8: Is there any evidence of lateral movement or additional compromise within the aluskort-prod group?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify any signs of lateral movement or further compromise within the affected group (<GROUP>) after the initial incident involving process <PROCESS_ID>.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Velociraptor (Target Group: <GROUP>):** Query endpoints to collect recent process execution, network connections, and system changes across hosts in the group.
    2.  **Wazuh API (for Agents in <GROUP>):** Search logs for related events (e.g., suspicious process creations, lateral movement attempts, unauthorized access).
    3.  **Organizational Data Lookup:** Look up asset inventory, user accounts, and recent changes in permissions or access rights within the group.

*   **Steps & Example Commands/Queries:**
    1.  **Velociraptor (Target Group: <GROUP>):**
        * Query to gather recent process executions:
            ```sql
            SELECT * FROM Artifact.Linux.System.Pslist(Hostname IN ('<HOSTNAME_1>', '<HOSTNAME_2>',...))
            WHERE Time > now() - 24h;
            ```
        * Query to identify unusual network connections:
            ```sql
            SELECT * FROM Artifact.Network.Connections(Hostname IN ('<HOSTNAME_1>', '<HOSTNAME_2>',...));
            ```
        * Query to detect unauthorized changes:
            ```sql
            SELECT * FROM Artifact.Linux.System.Changes(Hostname IN ('<HOSTNAME_1>', '<HOSTNAME_2>',...));
            ```

    2.  **Wazuh API (for Agents in <GROUP>):**
        * Search for related alerts across agents:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=rule.groups:rootcheck OR rule.groups:malware
            ```
        * Generic log search for suspicious activities:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=<IOC_FROM_ROOTCHECK_ALERT>
            ```

    3.  **Organizational Data Lookup:**
        * Lookup asset inventory for group members:
            ```bash
            # Example lookup script (pseudocode)
            echo "Hostnames:" && ls -l /path/to/assets/db/hostnames.csv | cut -f2 -d',' && echo ""
            echo "User Accounts:" && ls -l /path/to/users/db/accounts.csv | cut -f2 -d',' && echo ""
            echo "Recent Access Changes:" && ls -l /path/to/accesslog/db/access_changes.csv | cut -f2 -d',' && echo ""
            ```

*   **Expected Outcome/Interpretation:**
    - ✅ If the initial process <PROCESS_ID> was isolated and no other suspicious activity is detected across the group's assets, it suggests limited impact.
    - ❌ If new compromised hosts or unauthorized access attempts are discovered, it indicates broader compromise within the group.
--------------------------------------------------

Question 9: Should we isolate 'ALU-ORDPROC-PROD-01' immediately while further investigation continues?
Detailed Plan:
**Investigative Plan:*** Objective: Assess risk and determine immediate containment actions based on the rootkit alert.

* Key Data Sources/Tools (Prioritized):
    1. **Organizational Asset Inventory**: Look up host 'ALU-ORDPROC-PROD-01' for business criticality, sensitivity, and network exposure.
    2. **Network Segmentation Map**: Check if 'ALU-ORDPROC-PROD-01' resides in a sensitive segment or DMZ.
    3. **Recent Alerts/Logs**: Review recent alerts or logs for similar anomalies or connections from the host.

* Steps & Example Commands/Queries:
    1. **Asset Inventory Lookup (Manual Query or API call)**:
        * Query asset database for host 'ALU-ORDPROC-PROD-01':
            `SELECT * FROM assets WHERE hostname = 'ALU-ORDPROC-PROD-01';`
        * Extract fields like criticality, department, and network zone.

    2. **Network Segmentation Map (Manual lookup)**:
        * Locate 'ALU-ORDPROC-PROD-01' in network diagrams or documentation.
        * Identify if it's in a production environment, DMZ, or isolated segment.

    3. **Recent Alert History (Wazuh API)**:
        * Query Wazuh API for recent alerts on 'ALU-ORDPROC-PROD-01':
            ```http
            GET /agents/<AGENT_ID>/alerts?start_time=1684971515&end_time=1685057915
            ```
        * Check for additional rootkit alerts, unusual outbound traffic, or unexpected services.

* Expected Outcome/Interpretation:
    - ✅ If 'ALU-ORDPROC-PROD-01' is a low-criticality server in a segmented network, isolation might not be necessary initially.
    - ❌ If it's a high-value system handling sensitive data or exposed externally, immediate isolation is recommended until root cause analysis is complete.
--------------------------------------------------