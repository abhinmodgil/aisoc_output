--- Detailed Investigative Plan for Alert ID: 1716285915.9646311 ---
--- Agent ID: ALU-003 ---

--- Initial Assessment (from Contextual Inquiry) ---
This alert, identified by MITRE Technique ID T1014 (Rootkit), indicates a possible kernel-level rootkit installation on 'ALU-ORDPROC-PROD-01'. Given the nature of T1014, key Cybersecurity Dimensions include: Process Behavior (to detect unusual processes), Host Vulnerability (kernel exploit assessment), User Attribution (potential compromised users), Network Behavior (any anomalous traffic), IOC in Threat Intel (known rootkits), and Contextual Dimension (criticality of the affected asset).

--- Validated IOCs Used for Plan Generation ---
{
  "Timestamp": "2024-05-21T10:05:15.123+0000",
  "Alert ID": "1716285915.9646311",
  "Rule ID": "521",
  "Rule Description": "Possible kernel level rootkit",
  "MITRE Technique ID": "T1014 \u2013 Rootkit",
  "Agent ID": "ALU-003",
  "Agent Name": "ALU-ORDPROC-PROD-01",
  "Agent IP": "10.60.5.25",
  "Group": "aluskort-prod",
  "Title": "Process '2508' hidden from /proc.",
  "Decoder": "rootcheck"
}

--- Detailed Investigative Questions and Plans ---

Question 1: What specific process ('2508') is being hidden from '/proc'?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify which exact process (<PROCESS_ID>) is being hidden from standard Linux process listings (e.g., /proc) on host <AGENT_HOSTNAME>.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Linux Command Line (on <AGENT_HOSTNAME>):** Use commands like `ps` and check `/proc/` to verify process visibility.
    2.  **Velociraptor (on <AGENT_HOSTNAME>):** Query endpoint to check process status and compare with /proc listings.
    3.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for related events (e.g., rootcheck alerts, suspicious processes).

*   **Steps & Example Commands/Queries:**
    1.  **Linux CLI (on <AGENT_HOSTNAME>, requires direct access or EDR execution):**
        * Attempt to list the process: `ps aux | grep <PROCESS_ID>`
        * Check its /proc entry: `ls -ld /proc/<PROCESS_ID>; cat /proc/<PROCESS_ID>/status`
        (Note: If hidden, these commands might yield no output or errors for the specific PID)

    2.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Query to list processes using standard artifact:
            ```sql
            SELECT * FROM Artifact.Linux.System.Pslist() WHERE Pid == <PROCESS_ID>
            ```
        * Query to check for discrepancies or signs of hiding (advanced):
            ```sql
            // More complex VQL might be needed to compare different process listing mechanisms
            ```

        * Query for rootcheck or suspicious process related alerts:
            ```http
            ```
        * Generic log search for the PID on the agent:
            ```http
            ```


*   **Expected Outcome/Interpretation:**
    - ✅ If process <PROCESS_ID> appears normally in `ps` and `/proc/<PROCESS_ID>` exists and is readable, it might be a false positive from the detection rule, or the hiding is intermittent/sophisticated.
    - ❌ If `ps` doesn't show <PROCESS_ID> but other tools (like EDR kernel-level listings if available via Velociraptor) do, or if `/proc/<PROCESS_ID>` is missing/inaccessible while the process is known to be running, it strongly indicates hiding.
--------------------------------------------------

Question 2: How did the rootkit manage to install itself on 'ALU-ORDPROC-PROD-01'?
Detailed Plan:
**Investigative Plan:*** Objective: Identify how the rootkit was installed on host <AGENT_HOSTNAME>.
* Key Data Sources/Tools (Prioritized):
    1.  **Organizational Asset Inventory:** Look up <AGENT_HOSTNAME> in asset management system for recent changes, deployments, or updates.
    2.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME>):** Query endpoint to check for traces of installation scripts, cron jobs, or unusual artifacts.
    3.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for related events (e.g., unauthorized package installations, cronjob creations, unexpected service starts).

* Steps & Example Commands/Queries:
    1.  **Asset Inventory Lookup (via Web Portal or API):**
        * Query asset inventory for <AGENT_HOSTNAME>:
            `SELECT * FROM assets WHERE hostname = '<AGENT_HOSTNAME>' ORDER BY timestamp DESC LIMIT 30;`
        * Look for recent additions, software updates, or scheduled tasks around the time of the alert.

    2.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME>):**
        * Query to check for cron jobs, startup scripts, or unusual services:
            ```sql
            SELECT * FROM Artifact.Linux.CronJobs() WHERE Hostname = '<AGENT_HOSTNAME>'
            SELECT * FROM Artifact.Linux.StartupScripts() WHERE Hostname = '<AGENT_HOSTNAME>'
            SELECT * FROM Artifact.Linux.Services() WHERE Hostname = '<AGENT_HOSTNAME>'
            ```
        * Advanced: Query for recently modified files under `/var/lib/dpkg/info/*` or `/usr/share/doc/*/DEBIAN/postinst`.

    3.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Query for unauthorized package installations:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=rule.description:unauthorized_package_installation AND data.package_name:*
            ```
        * Query for cronjob creation events:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=rule.description:cronjob_created AND data.cronjob_content:*
            ```
        * Query for unexpected service start events:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=rule.description:unexpected_service_start AND data.service_name:*
            ```

* Expected Outcome/Interpretation:
    - ✅ If recent changes align with known deployment schedules or legitimate activities, consider it a false positive.
    - ❌ If new cronjobs, startup scripts, or packages were installed shortly before the alert, investigate further.
    - ❌ If no obvious installation method is found, consider lateral movement or compromised credentials.
--------------------------------------------------

Question 3: Is there any indication of unauthorized user access preceding the rootkit installation?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify any prior unusual login attempts or failed authentications around the time of the rootkit installation.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for authentication failures or anomalies before the rootkit alert.
    2.  **Organizational Data Lookup:** Check user access records or recent changes in permissions for users on the affected host.
    3.  **Velociraptor (on <AGENT_HOSTNAME>):** Query for recent login history, especially those involving the same user or unusual locations.

*   **Steps & Example Commands/Queries:**
    1.  **Wazuh API (Endpoint: /agents/<AGENT_ID>/logs/summary):**
        * Query for authentication-related events before the rootkit alert timestamp:
        ```http
        GET /agents/<AGENT_ID>/logs/summary?q=rule.description:authentication_failure OR rule.description:failed_login AND timestamp:[<ROOTKIT_TIMESTAMP>-30m TO <ROOTKIT_TIMESTAMP>+30m]
        ```
        * Look for repeated failed logins from unexpected locations or usernames.

    2.  **Organizational Data Lookup (e.g., HR system or Access Management DB):**
        * Query for recent changes in user permissions or roles for the affected host:
        ```sql
        SELECT * FROM user_changes WHERE host = '<AGENT_HOSTNAME>' AND timestamp >= '<ROOTKIT_TIMESTAMP>-30m';
        ```
        * Check for any new accounts created or permissions escalated around the time of the rootkit alert.

    3.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME>):**
        * Query for recent login history for the affected user (<USERNAME>) or similar anomalous logins:
        ```sql
        SELECT * FROM Artifact.Linux.System.LoginHistory(Hostname='<AGENT_HOSTNAME>') WHERE Username LIKE '%<USERNAME>%';
        ```
        * Look for multiple failed logins followed by successful ones, or logins from unfamiliar locations.

*   **Expected Outcome/Interpretation:**
    - ✅ If prior authentication failures or permission changes are detected near the rootkit alert, it suggests a possible compromise path.
    - ❌ If no such anomalies are found, focus on other aspects of the investigation.
--------------------------------------------------

Question 4: Have other hosts in the 'aluskort-prod' group shown similar anomalies?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify if other hosts in the same organizational group ('aluskort-prod') have exhibited similar rootkit-related behaviors.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Wazuh API (for Group 'aluskort-prod'):** Query for alerts matching the same rule description (e.g., Rule ID 521) across multiple agents.
    2.  **Velociraptor (across Agents in 'aluskort-prod' Group):** Run a distributed query to detect similar rootkit-like behaviors across multiple hosts.
    3.  **Centralized Log Aggregation (ELK Stack, Splunk, etc.):** Search for correlated alerts or logs across multiple hosts indicating similar rootkit activities.

*   **Steps & Example Commands/Queries:**
    1.  **Wazuh API (for Group 'aluskort-prod', Target Group ID: 'aluskort-prod'):**
        * Query for alerts matching the same rule description (e.g., Rule ID 521) across multiple agents:
        ```http
        GET /groups/aluskort-prod/alerts?q=rule.description:Possible%20kernel%20level%20rootkit
        ```
        * Note: This assumes Wazuh's grouping mechanism is based on agent IDs or hostnames, adjust accordingly if using custom fields.

    2.  **Velociraptor (across Agents in 'aluskort-prod' Group, Target Group ID: 'aluskort-prod'):**
        * Query to detect similar rootkit-like behaviors across multiple hosts:
        ```sql
        SELECT * FROM Artifact.Linux.System.Pslist() WHERE Pid == <PROCESS_ID> AND Hostname IN (SELECT DISTINCT Hostname FROM AgentMetadata WHERE GroupName='aluskort-prod');
        ```
        * Adjust the query to include additional rootkit-related artifacts or behaviors.

    3.  **Centralized Log Aggregation (ELK Stack, Splunk, etc.):**
        * Search for correlated alerts or logs across multiple hosts indicating similar rootkit activities:
        ```kibana-query
        {
            "query": "(event.action:alert AND event.module:wazuh AND event.dataset:file_integrity AND message:\"Possible kernel level rootkit\") OR (event.action:alert AND event.module:wazuh AND event.dataset:file_integrity AND message:\"Suspicious process hiding\")",
            "filter": [
                {
                    "term": {
                        "host.hostname.keyword": "ALU-*"
                    }
                },
                {
                    "terms": {
                        "tags.keyword": ["wazuh"]
                    }
                }
            ]
        }
        ```
        * Replace `"ALU-*"` with the appropriate wildcard pattern for your environment.

*   **Expected Outcome/Interpretation:**
    - ✅ If other hosts in the 'aluskort-prod' group also exhibit similar rootkit-related alerts or behaviors, it suggests a broader issue affecting multiple machines.
    - ❌ If only one host shows the anomaly, it could indicate isolated compromise or misconfiguration.
--------------------------------------------------

Question 5: What kernel version is running on 'ALU-ORDPROC-PROD-01'?
Detailed Plan:
**Investigative Plan:***   Objective: Identify the exact kernel version running on host <AGENT_HOSTNAME>. This will help determine if the observed behavior aligns with expected kernel operations or could indicate a rootkit attempting to hide itself.

*   Key Data Sources/Tools (Prioritized):
    1.  **Linux Command Line (on <AGENT_HOSTNAME>):** Execute commands to retrieve kernel version information.
    2.  **Velociraptor (on <AGENT_HOSTNAME>):** Query endpoint to gather system information including kernel version.
    3.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for related events (e.g., rootcheck alerts, system info reports).

*   Steps & Example Commands/Queries:
    1.  **Linux CLI (on <AGENT_HOSTNAME>, requires direct access or EDR execution):**
        * List currently running kernels: `cat /proc/version`
        * Check kernel version history: `cat /var/log/dpkg.log | grep linux-image`
        * Compare against known good versions: `diff /proc/version /etc/debian_version`

    2.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Query to list system info including kernel version:
          ```sql
          SELECT * FROM Artifact.Linux.System.Info()
          ```
        * Advanced: Query for kernel modules loaded at the time of the alert:
          ```sql
          SELECT * FROM Artifact.Linux.KernelModules() WHERE TimeGenerated > '2024-05-21T10:00:00'
          ```

    3.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Query for rootcheck or system info related alerts:
          ```http
          GET /agents/<AGENT_ID>/logs/summary?q=rule.groups:rootcheck OR rule.groups:system_info AND (data.kernel.version:* OR "kernel version")
          ```
        * Generic log search for kernel-related events:
          ```http
          GET /agents/<AGENT_ID>/logs/summary?q=kernel
          ```

*   Expected Outcome/Interpretation:
    - ✅ If the retrieved kernel version matches the expected one for the operating system and release, it likely indicates a benign situation.
    - ❌ If the kernel version is outdated, mismatching, or shows unusual modifications (e.g., unexpected patches applied), it raises suspicion of tampering or compromise.
--------------------------------------------------

Question 6: Are there any known CVEs affecting the kernel version that could facilitate rootkit installation?
Detailed Plan:
**Investigative Plan:***   Objective: Identify any known vulnerabilities in the kernel version (<KERNEL_VERSION>) that could allow rootkits or similar malware to operate undetected.

*   Key Data Sources/Tools (Prioritized):
    1.  **CVE Databases (NVD, Red Hat CVE Database, etc.):** Search for CVEs affecting the exact kernel version (<KERNEL_VERSION>).
    2.  **OSINT Tools (Censys, Shodan, ZoomEye):** Look for publicly exposed hosts with same kernel version (<KERNEL_VERSION>) to assess exposure.
    3.  **Internal Vulnerability Management Systems (VMDB):** Check if organization's VMDB tracks any known issues for <KERNEL_VERSION>.

*   Steps & Example Commands/Queries:
    1.  **NVD/CVE Search (Online NVD API or Website):**
        * Query: Search for CVEs affecting the exact kernel version (<KERNEL_VERSION>):
            `cve-search --version <KERNEL_VERSION>`
        * Expected Output: List of matching CVE IDs with severity scores.
    2.  **Shodan/Censys/ZoomEye Search (Public Internet Scanning):**
        * Query: Search for publicly accessible hosts running the exact kernel version (<KERNEL_VERSION>):
            `shodan search 'os:"<KERNEL_VERSION>"'`
            `censys search'services.os.type:"<KERNEL_VERSION>"'`
            `zoomeye search "kernel_version:<KERNEL_VERSION>"`
        * Expected Output: List of IP addresses exposing the vulnerable kernel version.
    3.  **Internal VMDB Query (if available):**
        * Query: Search for vulnerability records mentioning <KERNEL_VERSION>:
            `SELECT * FROM vmdb.vulnerabilities WHERE affected_os LIKE '%<KERNEL_VERSION>%';`
        * Expected Output: List of internal vulnerability records matching the kernel version.

*   Expected Outcome/Interpretation:
    - ✅ If multiple high-severity CVEs exist for <KERNEL_VERSION>, especially those allowing local privilege escalation or bypassing security checks, it suggests increased risk.
    - ❌ If only low-risk or informational CVEs are found, or none at all, it reduces immediate concern but does not eliminate the possibility of unknown exploits.
--------------------------------------------------

Question 7: What additional processes or services are running under the 'root' UID on 'ALU-ORDPROC-PROD-01'?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify all active processes/services running under the 'root' UID on host <AGENT_HOSTNAME>.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Linux Command Line (on <AGENT_HOSTNAME>):** Execute commands to enumerate processes owned by UID 0.
    2.  **Velociraptor (on <AGENT_HOSTNAME>):** Run VQL queries to gather process information.
    3.  **Wazuh API (for Agent ID <AGENT_ID>):** Search logs for related events (e.g., rootcheck alerts, suspicious processes).

*   **Steps & Example Commands/Queries:**
    1.  **Linux CLI (on <AGENT_HOSTNAME>, requires direct access or EDR execution):**
        * List all processes owned by UID 0: `ps aux | awk '$3 == "root"'`
        * Check for unusual processes/services: `grep -E '^root\s.*' /var/log/auth.log`
        * Look for unexpected binaries: `find /usr/bin /usr/sbin /sbin /opt -user root -type f`

    2.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Query to list processes owned by UID 0:
          ```sql
          SELECT * FROM Artifact.Linux.System.Pslist() WHERE Uid == 0;
          ```
        * Advanced query to check for unusual process names or paths:
          ```sql
          SELECT * FROM Artifact.Linux.System.Pslist() WHERE Uid == 0 AND Path LIKE '/tmp/%';
          ```

        * Query for rootcheck alerts specifically mentioning UID 0:
          ```http
          ```
        * Generic log search for processes owned by UID 0:
          ```http
          GET /agents/<AGENT_ID>/logs/summary?q=data.process.uid:0
          ```

*   **Expected Outcome/Interpretation:**
    - ✅ If only expected system daemons/processes are found under UID 0, it's likely benign.
    - ❌ If unknown or suspicious processes/services are discovered, escalate for further analysis.
--------------------------------------------------

Question 8: Can we retrieve a memory dump or snapshot of 'ALU-ORDPROC-PROD-01' to analyze for rootkit indicators?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Capture volatile memory from host <AGENT_HOSTNAME> to inspect for rootkits or malicious code.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Velociraptor (on <AGENT_HOSTNAME>):** Collect live memory snapshot using VQL artifacts.
    2.  **Linux CLI (on <AGENT_HOSTNAME>):** Run manual memory capture commands.
    3.  **Wazuh API (for Agent ID <AGENT_ID>):** Search for previous memory analysis results or related alerts.

*   **Steps & Example Commands/Queries:**
    1.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME> or Agent ID: <AGENT_ID>):**
        * Create a new case in Velociraptor:
          `POST /api/cases/new`
          {
            "case_name": "Memory Analysis for <AGENT_HOSTNAME>",
            "description": "Collect memory dump for rootkit analysis.",
            "tags": ["memory_dump", "rootkit_analysis"]
          }
        * Execute memory collection artifact:
          ```sql
          SELECT * FROM Artifact.Linux.Memdump(Hostname='<AGENT_HOSTNAME>')
          ```
        * Optionally run advanced rootkit hunting VQL:
          ```sql
          SELECT * FROM Artifact.Linux.RootkitHunt(Hostname='<AGENT_HOSTNAME>')
          ```

    2.  **Linux CLI (on <AGENT_HOSTNAME>):**
        * Manually create a memory dump:
          `dd if=/dev/mem bs=1M count=512 | gzip > /tmp/memory.gz`
        * Extract strings from memory:
          `strings /tmp/memory.gz | less`
        * Inspect loaded modules:
          `cat /proc/modules | grep -i rootkit`

    3.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Search for prior memory dumps or rootkit-related alerts:
          `GET /agents/<AGENT_ID>/cases?q=rootkit OR memory OR volatility`
        * Look for successful memory captures or failed attempts:
          `GET /agents/<AGENT_ID>/tasks?q=volatility OR memdump`

*   **Expected Outcome/Interpretation:**
    - ✅ If Velociraptor collects a valid memory dump and finds no obvious rootkit indicators, proceed with deeper static/dynamic analysis.
    - ❌ If Velociraptor fails due to insufficient permissions or the rootkit hides itself during collection, consider escalating privileges or using alternative methods (e.g., physical memory extraction via USB drive).
    - ❌ If the Linux CLI commands fail due to lack of required permissions, escalate to privileged mode or use Velociraptor instead.
--------------------------------------------------

Question 9: Are there any network connections originating from 'ALU-ORDPROC-PROD-01' that suggest C&C communication?
Detailed Plan:
**Investigative Plan:***   Objective: Identify and analyze network traffic from host <AGENT_HOSTNAME> (Agent ID: <AGENT_ID>) that could indicate C&C communication.

*   Key Data Sources/Tools (Prioritized):
    1.  **Network Traffic Analysis Tools:** Wireshark, Zeek, Suricata, Network Miner, etc.
    2.  **Firewall Logs:** Check for outbound connections from <AGENT_HOSTNAME>.
    3.  **DNS Logs:** Look for DNS requests to suspicious domains.
    4.  **Endpoint Detection and Response (EDR):** Review EDR logs for unusual network activities.

*   Steps & Example Commands/Queries:
    1.  **Capture Network Traffic on <AGENT_HOSTNAME>:**
        * Use tcpdump to capture live traffic:
            ```bash
            # Capture only TCP traffic on port 80 (HTTP)
            tcpdump -i eth0 -w /tmp/http_traffic.pcap 'tcp port 80'
            ```
        * Alternatively, use built-in packet capturing tools like `netstat -anp` or `ss -ntlp`.

    2.  **Analyze Captured Traffic:**
        * Open captured pcap file in Wireshark:
            ```bash
            wireshark /tmp/http_traffic.pcap
            ```
        * Filter for TCP traffic to/from <AGENT_HOSTNAME>:
            ```wireshark
            ip.addr == <AGENT_IP> && tcp.port == 443
            ```
        * Look for unusual destination ports, large data transfers, or encrypted traffic.

    3.  **Review Firewall Logs:**
        * Access firewall logs through centralized management console:
            ```bash
            curl -u admin:password 
            ```
        * Search for outbound connections initiated by <AGENT_HOSTNAME>:
            ```bash
            curl -u admin:password 
            ```

    4.  **Check DNS Logs:**
        * Extract DNS logs from Syslog:
            ```bash
            journalctl _COMM=dns -f
            ```
        * Search for DNS queries to suspicious domains:
            ```bash
            journalctl _COMM=dns | grep -E '(bad-domain.com|evil-site.net)'
            ```

    5.  **EDR Log Analysis:**
        * Connect to EDR console:
            ```bash
            sshjohn.doe@example.com           ```
        * Run query to retrieve network-related events:
            ```bash
           ./velociraptor-cli.exe query 'SELECT * FROM Artifact.NetworkConnections()'
            ```

*   Expected Outcome/Interpretation:
    - ✅ If Wireshark shows HTTP/S traffic to known C&C servers or suspicious destinations, it's likely a C&C connection.
    - ❌ If no such traffic is observed, focus on analyzing DNS logs and firewall logs for potential exfiltration attempts.
--------------------------------------------------

Question 10: Has the rootkit modified any system binaries or files that could affect recovery?
Detailed Plan:
**Investigative Plan:**
*   **Objective:** Identify which system binaries or files have been altered by the rootkit, focusing on those crucial for recovery operations.

*   **Key Data Sources/Tools (Prioritized):**
    1.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME>):** Utilize Velociraptor's capabilities to scan for modifications to key system files and binaries.
    2.  **Wazuh API (for Agent ID <AGENT_ID>):** Query Wazuh logs for any alerts related to tampering with system binaries or files.
    3.  **Linux Command Line (on <AGENT_HOSTNAME>):** Perform manual checks on critical system files and directories.

*   **Steps & Example Commands/Queries:**
    1.  **Velociraptor (Target Hostname: <AGENT_HOSTNAME>):**
        * Run a custom VQL artifact to detect changes in critical system binaries and files:
            ```sql
            SELECT * FROM Artifact.Custom.RootkitScan(Hostname='<AGENT_HOSTNAME>')
            ```
        * This artifact should specifically focus on checking for alterations in files such as `/bin/bash`, `/usr/bin/passwd`, `/sbin/mount`, `/usr/sbin/sshd`, etc.
        * It should also include checks for modifications in critical directories like `/bin`, `/sbin`, `/lib`, `/usr/lib`, `/usr/local/bin`.
        * Output should include file paths, hashes before and after modification, and any other relevant metadata.

    2.  **Wazuh API (Target Agent ID: <AGENT_ID>):**
        * Search for alerts related to tampering with system binaries or files:
            ```http
            GET /agents/<AGENT_ID>/logs/summary?q=rule.description:Tampered%20System%20Binary%20OR%20Modified%20Critical%20Files
            ```
        * Look for alerts generated by rules like 5200 ("Suspicious File Modification"), 5201 ("Tampered System Binary"), or others that indicate unauthorized changes to critical files.

        * Manually inspect critical system files and directories:
            * Check the integrity of `/bin/bash`, `/usr/bin/passwd`, `/sbin/mount`, `/usr/sbin/sshd`, etc.:
                ```bash
                sha256sum /bin/bash /usr/bin/passwd /sbin/mount /usr/sbin/sshd
                ```
            * Compare the checksums against known good values stored elsewhere (e.g., in a secure backup system).
            * Inspect critical directories like `/bin`, `/sbin`, `/lib`, `/usr/lib`, `/usr/local/bin`:
                ```bash
                ls -lAh /bin/* /sbin/* /lib/* /usr/lib/* /usr/local/bin/*
                ```
            * Look for unexpected permissions, ownership changes, or new files that weren't there previously.

*   **Expected Outcome/Interpretation:**
    - ✅ If Velociraptor finds no altered files, and Wazuh shows no related alerts, and manual inspection confirms everything looks normal, then the rootkit hasn't affected critical recovery files.
    - ❌ If Velociraptor detects altered files, especially ones crucial for recovery, or Wazuh reports tampering alerts, or manual inspection reveals discrepancies, proceed with further analysis and containment steps.
--------------------------------------------------